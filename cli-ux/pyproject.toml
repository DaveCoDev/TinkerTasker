[project]
name = "cli-ux"
version = "0.1.0"
description = "CLI UX for TinkerTasker"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "ai-core",
    "click>=8.2,<9.0",
    "loguru>=0.7.0,<1.0",
    "pendulum>=3.1,<4.0",
    "pydantic>=2.11,<3.0",
    "rich>=14.0,<15.0",
]

[project.scripts]
tinkertasker = "cli_ux.main:chat"

[tool.uv]
package = true

[dependency-groups]
dev = [
    "pyright",
    "pytest",
    "pytest-asyncio",
]
lint = [
    "ruff",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv.sources]
ai-core = { path = "../ai-core", editable = true }

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT", # flake-pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = ["E501"]
unfixable = []

[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = false
known-first-party = ["cli_ux"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning suppressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::pytest_asyncio.plugin.PytestDeprecationWarning",
]
